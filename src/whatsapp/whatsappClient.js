const { Client, LocalAuth, MessageMedia } = require('whatsapp-web.js');
const qrcode = require('qrcode');
const {deleteQrImage} = require('../images/images.controller')
const CensusController = require('../census/census.controller')
const path = require('path')
const fs = require('fs-extra')

function formatarRespuesta(data) {
    if (!data || !data.rows || data.rows.length === 0) {
        return 'No se encontraron datos.';
    }

    const persona = data.rows[0].dataValues;
    const colegio = persona.colegio ? persona.colegio.dataValues : {};
    const lider = persona.leaders ? persona.leaders.dataValues : {};
    const voto = persona?.sufragio?.suffrage ? persona.sufragio = 'Vot√≥' : 'No ha votado'

    return  `üë§ Nombre: ${persona.firstName} ${persona.lastName}\n` +
            `üòâ Apodo: ${persona.nickname || 'No especificado'}\n` +
            `üì± Celular: ${persona.celphone || 'No especificado'}\n` +
            `üèõÔ∏è  Colegio: ${colegio.collegeNumber || 'No especificado'}\n` +
            `üè´ Recinto: ${colegio.precinctData.recintoNombre || 'No especificado'}\n` +
            `üè† Direcci√≥n: ${persona.adress || 'No especificada'}\n`+
            `üó≥Ô∏è *${voto}*\n`+
            `ü¶∏ Lider: ${lider?.censu?.firstName || ' No especificado'}\n`;
           // Agrega m√°s campos seg√∫n necesites
}

function formatearImagen(data) {
    if (!data || !data.rows || data.rows.length === 0) {
        return 'No se encontraron datos.';
    }
    const persona = data.rows[0].dataValues;
    return persona.picture
           // Agrega m√°s campos seg√∫n necesites
}

const generateQRImage = async (text, filePath) => {
    try {
        await qrcode.toFile(filePath, text);
        return true;
    } catch (error) {
        console.error('Error al generar el archivo de c√≥digo QR:', error);
        return false;
    }
};

const client = new Client({
    authStrategy: new LocalAuth() // Usando LocalAuth para la autenticaci√≥n
});

client.on('qr', qr => {
    const qrFilePath = path.join(__dirname, './qr/qr.png');
    generateQRImage(qr, qrFilePath).then((success) => {
        if (success) {
            console.log('C√≥digo QR guardado en:', qrFilePath);
        } else {
            console.log('Error al guardar el c√≥digo QR');
        }
    });
});

client.on('ready', () => {
    console.log('Client is ready!');
    deleteQrImage('../whatsapp/qr','qr.png')

});

// Listener de mensajes
const chatStates = {};

client.on('message', async message => {
    const chatId = message.from;
    const msgText = message.body;

    // Inicializa el estado del chat si no existe
    if (!chatStates[chatId]) {
        chatStates[chatId] = { stage: 0 };
    }

    // Manejo del flujo de conversaci√≥n
    switch (chatStates[chatId].stage) {
        case 0:
            if (msgText.toLowerCase() != null) {
                await message.reply("Saludos, soy el bot de MiElector y estoy aqu√≠ para ayudarte. ü§ñ\nElige un n√∫mero de esta lista:\n\n" +
                "1Ô∏è‚É£ Consultar C√©dula.\n" +
                "2Ô∏è‚É£ Recibir mi Padroncillo.");
                chatStates[chatId].stage = 1; // Avanza al siguiente estado
            }
            break;

        case 1:
            if (msgText === '1') {
                await message.reply("Ind√≠queme el n√∫mero de c√©dula, por favor.");
                chatStates[chatId].stage = 2; // Avanza al estado de consulta de c√©dula
            } else if (msgText === '2') {
                // Aqu√≠ manejas la l√≥gica para el Padroncillo
                await message.reply("Esta opci√≥n se encuentra en desarrollo y a√∫n no esta disponible)");
                chatStates[chatId].stage = 0; // Regresa al estado inicial

            }
            break;

        case 2:
            // Aqu√≠ manejas la l√≥gica para buscar la c√©dula en la base de datos
            // Por ejemplo, puedes hacer una consulta a tu base de datos aqu√≠
            //const respuestaDB = "Resultado de la DB para la c√©dula " + msgText;
            const respuestaDB = await CensusController.findPeople(msgText)
            const mensaje = await formatarRespuesta(respuestaDB);
            await message.reply(mensaje);
            const nombreImagen = await formatearImagen(respuestaDB)
            if(nombreImagen){
                const imagePath = path.resolve( __dirname, `../../uploads/images/citizens/${nombreImagen}`);
                if (await fs.existsSync(imagePath)) {
                    const imageMedia = MessageMedia.fromFilePath(imagePath);
                    await client.sendMessage(message.from, imageMedia);
                } 
            }
            chatStates[chatId].stage = 0; // Regresa al estado inicial
            break;

        // Agrega m√°s casos seg√∫n sea necesario
    }
});

client.initialize();

module.exports = client;